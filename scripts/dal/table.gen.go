// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mr-LvGJ/gobase/scripts/model/entity"
)

func newTable(db *gorm.DB, opts ...gen.DOOption) table {
	_table := table{}

	_table.tableDo.UseDB(db, opts...)
	_table.tableDo.UseModel(&entity.Table{})

	tableName := _table.tableDo.TableName()
	_table.ALL = field.NewAsterisk(tableName)
	_table.ID = field.NewString(tableName, "id")
	_table.CreatedAt = field.NewTime(tableName, "created_at")
	_table.UpdatedAt = field.NewTime(tableName, "updated_at")
	_table.DeletedAt = field.NewField(tableName, "deleted_at")
	_table.Title = field.NewString(tableName, "title")
	_table.Status = field.NewString(tableName, "status")
	_table.Author = field.NewString(tableName, "author")
	_table.DisplayTime = field.NewTime(tableName, "display_time")
	_table.PageViews = field.NewInt64(tableName, "page_views")

	_table.fillFieldMap()

	return _table
}

type table struct {
	tableDo tableDo

	ALL         field.Asterisk
	ID          field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Title       field.String
	Status      field.String
	Author      field.String
	DisplayTime field.Time
	PageViews   field.Int64

	fieldMap map[string]field.Expr
}

func (t table) Table(newTableName string) *table {
	t.tableDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t table) As(alias string) *table {
	t.tableDo.DO = *(t.tableDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *table) updateTableName(table string) *table {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Title = field.NewString(table, "title")
	t.Status = field.NewString(table, "status")
	t.Author = field.NewString(table, "author")
	t.DisplayTime = field.NewTime(table, "display_time")
	t.PageViews = field.NewInt64(table, "page_views")

	t.fillFieldMap()

	return t
}

func (t *table) WithContext(ctx context.Context) *tableDo { return t.tableDo.WithContext(ctx) }

func (t table) TableName() string { return t.tableDo.TableName() }

func (t table) Alias() string { return t.tableDo.Alias() }

func (t table) Columns(cols ...field.Expr) gen.Columns { return t.tableDo.Columns(cols...) }

func (t *table) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *table) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["title"] = t.Title
	t.fieldMap["status"] = t.Status
	t.fieldMap["author"] = t.Author
	t.fieldMap["display_time"] = t.DisplayTime
	t.fieldMap["page_views"] = t.PageViews
}

func (t table) clone(db *gorm.DB) table {
	t.tableDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t table) replaceDB(db *gorm.DB) table {
	t.tableDo.ReplaceDB(db)
	return t
}

type tableDo struct{ gen.DO }

func (t tableDo) Debug() *tableDo {
	return t.withDO(t.DO.Debug())
}

func (t tableDo) WithContext(ctx context.Context) *tableDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tableDo) ReadDB() *tableDo {
	return t.Clauses(dbresolver.Read)
}

func (t tableDo) WriteDB() *tableDo {
	return t.Clauses(dbresolver.Write)
}

func (t tableDo) Session(config *gorm.Session) *tableDo {
	return t.withDO(t.DO.Session(config))
}

func (t tableDo) Clauses(conds ...clause.Expression) *tableDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tableDo) Returning(value interface{}, columns ...string) *tableDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tableDo) Not(conds ...gen.Condition) *tableDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tableDo) Or(conds ...gen.Condition) *tableDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tableDo) Select(conds ...field.Expr) *tableDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tableDo) Where(conds ...gen.Condition) *tableDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tableDo) Order(conds ...field.Expr) *tableDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tableDo) Distinct(cols ...field.Expr) *tableDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tableDo) Omit(cols ...field.Expr) *tableDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tableDo) Join(table schema.Tabler, on ...field.Expr) *tableDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tableDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tableDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tableDo) RightJoin(table schema.Tabler, on ...field.Expr) *tableDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tableDo) Group(cols ...field.Expr) *tableDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tableDo) Having(conds ...gen.Condition) *tableDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tableDo) Limit(limit int) *tableDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tableDo) Offset(offset int) *tableDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tableDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tableDo) Unscoped() *tableDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tableDo) Create(values ...*entity.Table) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tableDo) CreateInBatches(values []*entity.Table, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tableDo) Save(values ...*entity.Table) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tableDo) First() (*entity.Table, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Table), nil
	}
}

func (t tableDo) Take() (*entity.Table, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Table), nil
	}
}

func (t tableDo) Last() (*entity.Table, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Table), nil
	}
}

func (t tableDo) Find() ([]*entity.Table, error) {
	result, err := t.DO.Find()
	return result.([]*entity.Table), err
}

func (t tableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Table, err error) {
	buf := make([]*entity.Table, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tableDo) FindInBatches(result *[]*entity.Table, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tableDo) Attrs(attrs ...field.AssignExpr) *tableDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tableDo) Assign(attrs ...field.AssignExpr) *tableDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tableDo) Joins(fields ...field.RelationField) *tableDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tableDo) Preload(fields ...field.RelationField) *tableDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tableDo) FirstOrInit() (*entity.Table, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Table), nil
	}
}

func (t tableDo) FirstOrCreate() (*entity.Table, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Table), nil
	}
}

func (t tableDo) FindByPage(offset int, limit int) (result []*entity.Table, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tableDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tableDo) Delete(models ...*entity.Table) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tableDo) withDO(do gen.Dao) *tableDo {
	t.DO = *do.(*gen.DO)
	return t
}
